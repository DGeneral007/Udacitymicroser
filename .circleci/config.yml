version: 2.1

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            # Add parameter here
            workflow_id:
                type: string
                default: ${CIRCLE_WORKFLOW_ID:0:7}
        steps:
            - run:
                name: Destroy every environments with current workflow_id
                when: on_fail
                command: |
                    echo "Destroying environment: << parameters.workflow_id >>"
                    aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
                    aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
                    aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Build front-end
                command: |
                    cd frontend
                    npm install
                    npm run build
            - save_cache:
                paths: [frontend/node_modules]
                key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Back-end build
                command: |
                    cd backend
                    npm install
                    npm run build
            - save_cache:
                paths: [backend/node_modules]
                key: backend-build
    # Compile errors have been fixed, now onto the next
    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                keys: [frontend-build]
            # Your job code here
            - run:
                name: Run frontend test
                command: |
                    cd frontend
                    npm install
                    npm run test
                
    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                keys: [backend-build]
            # Your job code here
            - run:
                name: Run backend Test
                command: |
                    cd backend
                    npm install
                    npm run test
    # Test runs erros fixed
    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                keys: [frontend-build]
            # Your job code here
            - run:
                name: scan frontend dependencies
                command: |
                    cd frontend
                    npm install
                    # npm install oauth-sign@^0.9.0
                    npm audit fix --audit-level=critical

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                keys: [backend-build]
            # Your job code here
            - run:
                name: scan banckend dependencies
                command: |
                    cd backend
                    npm install
                    # npm install oauth-sign@^0.9.0
                    npm audit fix --audit-level=critical
    # scan-test fixed
    deploy-infrastructure:
        docker:
            # Docker image here that supports AWS CLI
            - image: amazon/aws-cli
        steps:
            # Checkout code from git
            - checkout
            - run: yum install -y tar gzip
            - run:
                name: Ensure back-end infrastructure exists
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/files/backend.yml \
                    --tags project=udapeople \
                    --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            - run:
                name: Ensure front-end infrastructure exist
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/files/frontend.yml \
                    --tags project=udapeople \
                    --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            - run:
                name: Add back-end ip to ansible inventory
                command: |
                    aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:Project,Values=udacity" \
                    --output text >> .circleci/ansible/inventory.txt
            - persist_to_workspace:
                root: ~/
                paths:
                    - project/.circleci/ansible/inventory.txt
            - destroy-environment:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                requires: [build-frontend]
            - test-backend:
                requires: [build-backend]
            - scan-frontend:
                requires: [build-frontend]
            - scan-backend:
                requires: [build-backend]
            - deploy-infrastructure:
                requires: [test-frontend, test-backend, scan-frontend, scan-backend]
                filters:
                    branches:
                        only: [master]